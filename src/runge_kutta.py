# src/integration.py

import numpy as np


def runge_kutta_4(func, t, y, dt, g):
    """
    Реализация метода Рунге-Кутты 4-го порядка для численного решения системы ОДУ.

    Параметры:
    func - функция, задающая систему дифференциальных уравнений
    t - текущее время (float)
    y - вектор состояния на текущем шаге
    dt - шаг времени
    g - ускорение свободного падения

    Возвращает:
    Новый вектор состояния после применения шага Рунге-Кутты
    """
    # Проверяем, что t — это число, а не список
    if isinstance(t, list):
        t = t[0]  # Если t - список, выбираем первый элемент

    # Кроки для метода Рунге-Кутты 4-го порядка
    k1 = np.array(func(t, y, g))
    k2 = np.array(func(t + 0.5 * dt, y + 0.5 * dt * k1, g))
    k3 = np.array(func(t + 0.5 * dt, y + 0.5 * dt * k2, g))
    k4 = np.array(func(t + dt, y + dt * k3, g))

    # Новый вектор состояния
    return y + (dt / 6) * (k1 + 2 * k2 + 2 * k3 + k4)
